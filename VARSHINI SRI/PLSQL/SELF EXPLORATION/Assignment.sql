-- Question 1

CREATE TABLE EMPLOYEE(
EMP_ID NUMBER,
EMP_NAME VARCHAR2(100),
DEPARTMENT VARCHAR2(50),
SALARY NUMBER
);

CREATE OR REPLACE PROCEDURE insert_employee
IS
BEGIN
INSERT INTO EMPLOYEE VALUES(101, 'Anitha', 'Talent Nurturing', 10000);
INSERT INTO EMPLOYEE VALUES(102, 'Anushya', 'Talent Nurturing', 5000);
INSERT INTO EMPLOYEE VALUES(103, 'Dinesh', 'Talent Acquisition', 60000);
INSERT INTO EMPLOYEE VALUES(104, 'Govarthanan', 'Talent Acquisition', 50000);
INSERT INTO EMPLOYEE VALUES(105, 'Jaya', 'Manager', 80000);
INSERT INTO EMPLOYEE VALUES(106, 'Naveen', 'Talent Nurturing', 5000);
INSERT INTO EMPLOYEE VALUES(107, 'Sabapathi', 'Talent Nurturing', 5000);
INSERT INTO EMPLOYEE VALUES(108, 'Saraswathi', 'Talent Nurturing', 40000);
INSERT INTO EMPLOYEE VALUES(109, 'Savitha', 'Talent Nurturing', 10000);
INSERT INTO EMPLOYEE VALUES(110, 'Silpa', 'Talent Nurturing', 10000);
INSERT INTO EMPLOYEE VALUES(111, 'Snigdha', 'Talent Nurturing', 5000);
INSERT INTO EMPLOYEE VALUES(112, 'Subbu', 'Manager', 80000);
COMMIT;
END;

BEGIN
  insert_employee;
END;

SELECT * FROM EMPLOYEE;

-- Question 2

CREATE OR REPLACE PROCEDURE update_salary
IS
BEGIN
UPDATE EMPLOYEE SET SALARY = SALARY + (SALARY * 0.1) WHERE SALARY < 5000;
UPDATE EMPLOYEE SET SALARY = SALARY + (SALARY * 0.075) WHERE SALARY BETWEEN 5000 AND 10000;
UPDATE EMPLOYEE SET SALARY = SALARY + (SALARY * 0.05) WHERE SALARY > 10000;
COMMIT;
END;

BEGIN
  update_salary;
END;

SELECT * FROM EMPLOYEE;

-- Question 3

DECLARE
   emp_names VARCHAR2(100);
   CURSOR cur_employees IS 
   SELECT EMP_NAME FROM EMPLOYEE;
BEGIN
  OPEN cur_employees;
  LOOP
    FETCH cur_employees INTO emp_names; 
    DBMS_OUTPUT.PUT_LINE (emp_names); 
    EXIT WHEN cur_employees%NOTFOUND; 
  END LOOP;
  CLOSE cur_employees;
END;

-- Question 4

CREATE OR REPLACE VIEW high_salary_employees AS
SELECT *
FROM EMPLOYEE
WHERE SALARY > 10000;

SELECT * FROM high_salary_employees;

-- Question 5

CREATE OR REPLACE FUNCTION calculate_bonus(p_salary IN NUMBER)
RETURN NUMBER
IS
    v_bonus NUMBER;
BEGIN
    IF p_salary < 5000 THEN
        v_bonus := p_salary * 0.1; 
    ELSIF p_salary >= 5000 AND p_salary <= 10000 THEN
        v_bonus := p_salary * 0.075; 
    ELSE
        v_bonus := p_salary * 0.05; 
    END IF;

    RETURN v_bonus;
END;

DECLARE
    v_salary NUMBER := 6000;
    v_bonus NUMBER;
BEGIN
    v_bonus := calculate_bonus(v_salary);
    DBMS_OUTPUT.PUT_LINE('Bonus for salary ' || v_salary || ': ' || v_bonus);
END;

-- Question 6

CREATE TABLE EMPLOYEE_LOG(
 event_type VARCHAR2(20),
 LOG_DATE DATE,
 LOG_MESSAGE VARCHAR2(100)
);

CREATE OR REPLACE TRIGGER log_employee_insert
AFTER INSERT ON EMPLOYEE
FOR EACH ROW
DECLARE
    v_log_message VARCHAR2(100);
BEGIN
    v_log_message := 'Employee inserted - EMP_ID: ' || :NEW.EMP_ID || ', EMP_NAME: ' || :NEW.EMP_NAME || ', DEPARTMENT: ' || :NEW.DEPARTMENT || ', SALARY: ' || :NEW.SALARY;

    INSERT INTO EMPLOYEE_LOG (event_type, LOG_DATE, LOG_MESSAGE)
    VALUES (ora_sysevent, SYSDATE, v_log_message);

    DBMS_OUTPUT.PUT_LINE('Log message inserted: ' || v_log_message);
END;

-- Question 7

CREATE TABLE orders
(
 order_id NUMBER
          GENERATED BY DEFAULT AS IDENTITY START WITH 201
          PRIMARY KEY,
 customer_id NUMBER(6, 0) NOT NULL,
 status      VARCHAR(20) NOT NULL,
 salesman_id NUMBER(6, 0),
 order_date  DATE NOT NULL
);

CREATE TABLE order_items
(
 order_id NUMBER(12, 0),
 item_id  NUMBER(12, 0),
 product_id NUMBER(12, 0) NOT NULL,
 quantity NUMBER(8, 2) NOT NULL,
 unit_price NUMBER(8, 2) NOT NULL
);

CREATE OR REPLACE VIEW Sales AS
SELECT customer_id,
       SUM(unit_price * quantity) total,
       ROUND(SUM(unit_price * quantity) * 0.05) credit,
FROM order_items
INNER JOIN orders USING (order_id)
WHERE status = "shipped"
GROUP BY customer_id;

DECLARE
 l_budget NUMBER := 1000000;
 CURSOR c_sales IS
 SELECT * FROM sales
 ORDER BY total DESC;
  r_sales c_sales%ROWTYPE;
BEGIN
 UPDATE customers SET credit_limit = 0;
 OPEN c_sales;
 LOOP
  FETCH c_sales INTO r_sales;
  EXIT WHEN c_sales%NOTFOUND;
  UPDATE
   customers
  SET
   credit_limit = 
   CASE WHEN l_budget > r_sales.credit
    THEN r_sales.credit
     ELSE l_budget
   END
  WHERE 
   customer_id = r_sales.customer_id;
  l_budget := l_budget - r_sales.credit;
  DBMS_OUTPUT.PUT_LINE("Customer id: " || r_sales.customer_id || "Credit: " || r_sales.credit || "Remaining Budget: " || l_budget);
  EXIT WHEN l_budget <= 0;
 END LOOP;
 CLOSE c_sales;
END;

SELECT customer_id, name, credit_limit FROM customers ORDER BY credit_limit DESC;

-- Question 8

CREATE TABLE EMPLOYE(
employee_id NUMBER,
first_name VARCHAR(25),
last_name VARCHAR(25),
email VARCHAR(25),
phone_number VARCHAR(15),
hire_date DATE,
job_id VARCHAR(25),
salary NUMBER,
commission_pct DECIMAL(5,2),
manager_id NUMBER,
department_id NUMBER
);

INSERT INTO EMPLOYE VALUES(501, 'Anitha', 'Manogaran', 'ABC', '9876543210', TO_DATE('2020-06-06', 'YYYY-MM-DD'), 'AD_PRES', 24000, 10.05, 101, 601); 
INSERT INTO EMPLOYE VALUES(502, 'Anushya', 'Narayanan', 'DEF', '9876543211', TO_DATE('2021-06-06', 'YYYY-MM-DD'), 'AD_VP', 17000, 12.05, 102, 602); 
INSERT INTO EMPLOYE VALUES(503, 'Savitha', 'Ragunathan', 'GHI', '9876543212', TO_DATE('2016-06-06', 'YYYY-MM-DD'), 'AD_VP', 17000, 14.05, 103, 603); 
INSERT INTO EMPLOYE VALUES(504, 'Snigdha', 'Agarwal', 'JKL', '9876543213', TO_DATE('2019-06-06', 'YYYY-MM-DD'), 'IT_PROG', 9000, 15.05, 104, 604); 

DECLARE
   emp_count NUMBER;
BEGIN
  SELECT COUNT(*)INTO emp_count FROM EMPLOYE;
  DBMS_OUTPUT.PUT_LINE('Total number of employees in EMPLOYE table: ' || emp_count);
END;

-- Question 9

DECLARE
   emp_fname VARCHAR(25);
   emp_sal NUMBER;
   CURSOR cur_employees(emp_salary NUMBER := 20000) 
   IS
   SELECT first_name, salary FROM EMPLOYE
   WHERE salary < emp_salary;
BEGIN
  OPEN cur_employees;
  LOOP
    FETCH cur_employees INTO emp_fname, emp_sal;
    EXIT WHEN cur_employees%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(emp_fname ||' '||emp_sal);
  END LOOP;
  CLOSE cur_employees;
END;

-- Question 10

CREATE OR REPLACE TRIGGER check_duplicate_job_id
BEFORE INSERT OR UPDATE ON EMPLOYE
FOR EACH ROW
DECLARE
    v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM EMPLOYE WHERE job_id = :new.job_id;
    IF v_count > 0 THEN
        RAISE_APPLICATION_ERROR('Duplicate job_id found: ' || :new.job_id);
    END IF;
END;

-- Question 11

CREATE OR REPLACE PROCEDURE emp_sal( jobs_id VARCHAR, sal_raise NUMBER) 
IS
BEGIN
  UPDATE EMPLOYE SET salary = salary * sal_raise WHERE job_id = jobs_id;
  COMMIT;
END;

BEGIN
  emp_sal('AD_VP', 2);
END;

SELECT * FROM EMPLOYE;

-- Question 12

CREATE TABLE employees
(
 EMPLOYEE_ID NUMBER PRIMARY KEY,
 FIRST_NAME  VARCHAR2(255) NOT NULL,
 LAST_NAME   VARCHAR2(255) NOT NULL,
 EMAIL_ID    VARCHAR2(255) NOT NULL,
 PHONE_NUMBER VARCHAR2(50) NOT NULL,
 JOIN_DATE   DATE NOT NULL,
 JOB_ID      VARCHAR2(50) NOT NULL,
 SALARY      NUMBER NOT NULL
);

INSERT INTO employees VALUES(100, 'ABC', 'DEF', 'abef', '9876543210', TO_DATE('2020-06-06', 'YYYY-MM-DD'), 'AD_PRES', 24000.00);
INSERT INTO employees VALUES(101, 'GHI', 'JKL', 'ghkl', '9876543211', TO_DATE('2021-06-06', 'YYYY-MM-DD'), 'AD_VP', 17000.00);
INSERT INTO employees VALUES(102, 'MNO', 'PQR', 'mnqr', '9876543212', TO_DATE('2016-06-06', 'YYYY-MM-DD'), 'AD_VP', 17000.00);
INSERT INTO employees VALUES(103, 'STU', 'VWX', 'stwx', '9876543213', TO_DATE('2019-06-06', 'YYYY-MM-DD'), 'IT_PROG', 9000.00);

DECLARE
    v_employee_id employees.employee_id%TYPE := 102;
    v_new_salary employees.salary%TYPE;
BEGIN
    SELECT salary INTO v_new_salary FROM employees WHERE employee_id = v_employee_id;
    v_new_salary := v_new_salary + 1000;
    UPDATE employees SET salary = v_new_salary WHERE employee_id = v_employee_id;
    DBMS_OUTPUT.PUT_LINE('Salary updated for employee ' || v_employee_id || ' to ' || v_new_salary);
    COMMIT;
END;


