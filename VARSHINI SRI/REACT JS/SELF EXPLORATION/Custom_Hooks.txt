1) Example - 1 :

a) App.js :

import './App.css';
import { useToggle } from './useToggle';

function App() {
  const [isVisible, toggle] = useToggle();
  const [isVisibleR, toggleR] = useToggle();
  return (
    <div className="App">
      <button onClick = {toggle}>
        {isVisible ? "Hide" : "Show"}
      </button>
      {isVisible && <h1>Hidden Text</h1>}
      
      <button onClick = {toggleR}>
        {isVisibleR ? "Hide" : "Show"}
      </button>
      {isVisibleR && <h1>Hidden Text</h1>}
    </div>
  );
}

export default App;

b) useToggle.js :

import { useState } from 'react';

export const useToggle = (initialVal = false) =>{
    const [state, setState] = useState(initialVal);

    const toggle = () =>{
        setState((prev)=>!prev)
    }

    return [state, toggle]
}

2) Example - 1 :

a) App.js :

import './App.css';
import { useToggle } from './useToggle';

function App() {
  const {state, toggle} = useToggle();
  return (
    <div className="App">
      <button onClick = {toggle}>
        {state ? "Hide" : "Show"}
      </button>
      {state && <h1>Hidden Text</h1>}
    </div>
  );
}

export default App;

b) useToggle.js :

import { useState } from 'react';

export const useToggle = (initialVal = false) =>{
    const [state, setState] = useState(initialVal);

    const toggle = () =>{
        setState((prev)=>!prev)
    }

    return {state, toggle}
}

3) Example - 1 :

a) App.js :

import './App.css';
import { useToggle } from './useToggle';

function App() {
  const {state: isVisible, toggle} = useToggle();
  return (
    <div className="App">
      <button onClick = {toggle}>
        {isVisible ? "Hide" : "Show"}
      </button>
      {isVisible && <h1>Hidden Text</h1>}
    </div>
  );
}

export default App;

b) useToggle.js :

import { useState } from 'react';

export const useToggle = (initialVal = false) =>{
    const [state, setState] = useState(initialVal);

    const toggle = () =>{
        setState((prev)=>!prev)
    }

    return {state, toggle}
}

4) Example - 2 :

a) Cat.js :

import { useGetCat } from "../useGetCat";

export const Cat = () =>{
const { data, isCatLoading, refetchData } = useGetCat();
if (isCatLoading) return <h1> Loading... </h1>;
return(
<div>
 <button onClick = {refetchData}>refetch</button>
 <h1>{data?.fact}</h1>
</div>
);
};

b) App.js :

import "./App.css";
import { Cat } from "./components/Cat";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";

function App(){

const client = new QueryClient({
defaultOptions: {
queries: {
 refetchOnWindowFocus: true,
},
},
});

return (
<div className = "App">
 <QueryClientProvider client = {client}>
  <Cat/>
 <QueryClientProvider/>
</div>
);
}

export default App;

c) useGetCat.js :

import { useQuery } from "@tanstack/react-query";
import Axios from "axios";

const useGetCat = () =>{
const { data, refetch, isLoading: isCatLoading } = useQuery(["cat"], ()=>{
return Axios.get("https://catfact.ninja/fact").then((res) => res.data);
});

const refetchData = () => {
alert("DATA REFETCHED");
refetch();
};

return { data, refetchData, isCatLoading };
}

5) Example - 3 :

a) App.js :

import "./App.css";
import { Cat } from "./components/Cat";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { useCount } from "./useCount";

function App(){
const { count, increase, decrease, restart } = useCount();

return(
<div className = "App">
{count}
<button onClick = {increase}>Increase<button/>
<button onClick = {decrease}>Decrease<button/>
<button onClick = {restart}>Restart<button/>
</div>
);
}

export default App;

b) useCount.js :

import { useState } from "react";

export const useCount = (initialVal = 0) =>{
const [count, setCount] = useState(initialVal);

const increase = () =>{
setCount((prev) => prev + 1);
};

const decrease = () =>{
setCount((prev) => prev - 1);
};

const restart = () =>{
setCount(0);
};

return { count, increase, decrease, restart };
};